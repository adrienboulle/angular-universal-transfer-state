{"version":3,"sources":["../src/transfer-state.ts"],"names":[],"mappings":"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","file":"transfer-state.js","sourceRoot":"","sourcesContent":["import { Injectable, NgModule } from '@angular/core';\nimport {\n  ConnectionBackend,\n  Http,\n  Request,\n  RequestOptions,\n  RequestOptionsArgs,\n  Response\n} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/observable/of';\n\n\nexport class TransferState {\n  static KEY = 'TransferState';\n  private _map = new Map<string, any>();\n\n  constructor() {}\n\n  keys() {\n    return this._map.keys();\n  }\n\n  get(key: string): any {\n    return this._map.get(key);\n  }\n\n  set(key: string, value: any): Map<string, any> {\n    return this._map.set(key, value);\n  }\n\n  toJson(): any {\n    const obj: any = {};\n    this._map.forEach((value: any, key: string, map: Map<string, any>) => obj[key] = value);\n    return obj;\n  }\n\n  initialize(obj: any): void {\n    Object.keys(obj).forEach((key: string) => this.set(key, obj[key]));\n  }\n\n  inject(location?: string): void {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\n\ntype iCallback = (uri: string | Request, body: any, options?: RequestOptionsArgs) => Observable<Response>;\n\n\nexport class TransferHttp {\n  constructor(private http: Http, protected transferState: TransferState) {}\n\n  request(uri: string | Request, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(uri, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.request(url, options);\n    });\n  }\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(url, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.get(url, options);\n    });\n  }\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n    return this.getPostData(url, body, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.post(url, body. options);\n    });\n  }\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(url, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.put(url, options);\n    });\n  }\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete(url: string, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(url, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.delete(url, options);\n    });\n  }\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<any> {\n    return this.getPostData(url, body, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.patch(url, body.options);\n    });\n  }\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(url, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.head(url, options);\n    });\n  }\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<any> {\n    return this.getData(url, options, (url: string, options: RequestOptionsArgs) => {\n      return this.http.options(url, options);\n    });\n  }\n\n  private getData(uri: string | Request, options: RequestOptionsArgs, callback: iCallback) {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + JSON.stringify(options);\n\n    try {\n      return this.resolveData(key);\n\n    } catch (e) {\n      return callback(uri, options)\n        .map(res => res.json())\n        .do(data => {\n          this.setCache(key, data);\n        });\n    }\n  }\n\n  private getPostData(uri: string | Request, body: any, options: RequestOptionsArgs, callback: iCallback) {\n\n    let url = uri;\n\n    if (typeof uri !== 'string') {\n      url = uri.url;\n    }\n\n    const key = url + JSON.stringify(body) + JSON.stringify(options);\n\n    try {\n\n      return this.resolveData(key);\n\n    } catch (e) {\n      return callback(uri, body, options)\n        .map(res => res.json())\n        .do(data => {\n          this.setCache(key, data);\n        });\n    }\n  }\n\n  private resolveData(key: string) {\n    const data = this.getFromCache(key);\n    if (!data) {\n      throw new Error();\n    }\n    return Observable.of(data);\n  }\n\n  private setCache(key: string, data: any) {\n    return this.transferState.set(key, data);\n  }\n\n  private getFromCache(key: string): any {\n    return this.transferState.get(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: TransferState, },\n];\n}\n\n\nexport class TransferHttpModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    TransferHttp\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}